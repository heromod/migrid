#!/bin/bash
#
#	/etc/rc.d/init.d/MiG
#
#	MiG is a Grid middleware with minimal installation requirements
#
#	Recognized arguments:
#	    start   - start MiG system components
#	    stop    - terminate MiG system components
#	    restart - terminate and start MiG system 
#	    status  - report MiG system component's status
#
# The script is mangled by a configuration generator, which
# replaces the __*__ variables by a valid configuration.
#
# Made from the template included with initscripts-8.45.25
#
# <tags ...>
#
# chkconfig: - 90 10
# description: MiG is a Grid solution with minimal installation requirements
# processname: grid_script.py(default)
# processname: grid_monitor.py(default)
# config: /etc/init.d/MiG (this file)
# 

# Source function library.
. /etc/init.d/functions

# <define any local shell functions used by the code that follows>


# default locations and user for MiG:
MIG_HOME=__MIG_HOME__
MIG_STATE=__MIG_STATE__
MIG_USER=__USER__

if [ -n $MIG_CONF ]; then 
    CUSTOMCONF="MIG_CONF=$MIG_CONF "
fi
# you probably do not want to modify these...
MIG_SERVER=${MIG_HOME}/server/grid_script.py
MIG_MONITOR=${MIG_HOME}/server/grid_monitor.py
DELAY=5
CUSTOMCONF+=" PYTHONPATH=/opt/nordugrid/lib/python2.4/site-packages:/opt/nordugrid/lib64/python2.4/site-packages"

start() {
	echo -n "Starting MiG server daemon: "
	daemon --user ${MIG_USER} \
	           "$CUSTOMCONF ${MIG_SERVER} 2>&1 > ${MIG_STATE}/server.out &"
	RET=$?
	if [ $RET -ne 0 ]; then 
	    failure
	    exit $RET
	else 
	    # some input for the mig server...
	    echo "" >> ${MIG_HOME}/server/server.stdin
	    success
	fi
	echo
	echo -n "Starting MiG monitor daemon:"
	daemon --user ${MIG_USER} \
	           "$CUSTOMCONF ${MIG_MONITOR} 2>&1 > ${MIG_STATE}/monitor.out &"
	RET2=$?
	[ $RET2 ] && success
	echo
	# if monitor does not work, too bad... continue
	[ $RET2 ] || echo "Warning: Monitor not started."
	touch /var/lock/subsys/MiG
	return $RET
}	

stop() {
	echo -n "Shutting down MiG monitor: "
	killproc ${MIG_MONITOR}
	echo
	pid=`pidofproc ${MIG_SERVER}`
	if [ -z "$pid" ]; then
	    echo -n "MiG server is not running..."
	    failure
	    echo
	else
            # try a shutdown before killing it
	    echo -n "SHUTDOWN MiG server (pid $pid)"
	    echo SHUTDOWN >> $MIG_HOME/server/server.stdin
	    sleep ${DELAY}
	    checkpid $pid
	    KILLED=$?
	    if [ $KILLED ]; then 
		success;
	    else 
		failure
		echo
		echo -n "Killing MiG server"
		killproc ${MIG_SERVER} -KILL;
	    fi
	    echo
	fi
	
	rm -f /var/lock/subsys/MiG
	return $RET
}

case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    status)
	status ${MIG_SERVER}
	status ${MIG_MONITOR}
	;;
    restart)
    	stop
	start
	;;
#    reload)
#	<cause the service configuration to be reread, either with
#	kill -HUP or by restarting the daemons, in a manner similar
#	to restart above>
#	;;
#    condrestart)
#    	<Restarts the servce if it is already running. For example:>
#	[ -f /var/lock/subsys/<service> ] && restart || :
#    probe)
#	<optional.  If it exists, then it should determine whether
#	or not the service needs to be restarted or reloaded (or
#	whatever) in order to activate any changes in the configuration
#	scripts.  It should print out a list of commands to give to
#	$0; see the description under the probe tag below.>
#	;;
    *)
#	echo "Usage: <servicename> {start|stop|status|reload|restart[|probe]"
	echo "Usage: <servicename> {start|stop|status|restart]"
	exit 1
	;;
esac
exit $?
